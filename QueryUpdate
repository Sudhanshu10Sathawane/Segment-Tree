#include <bits/stdc++.h>
using namespace std;
void build(int ind, int low, int high, int arr[], int seg[])
{
    if (low == high)
    {
        seg[ind] = arr[low];
        return;
    }
    int mid = low + (high - low) / 2;
    build(2 * ind + 1, low, mid, arr, seg);
    build(2 * ind + 2, mid + 1, high, arr, seg);
    seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
}
int query(int ind, int low, int high, int l, int r, int arr[], int seg[])
{
    if (high < l || r < low)
    {
        return INT_MAX;
    }
    if (low >= l && high <= r)
    {
        return seg[ind];
    }
    int mid = low + (high - low) / 2;
    int left = query(2 * ind + 1, low, mid, l, r, arr, seg);
    int right = query(2 * ind + 2, mid + 1, high, l, r, arr, seg);
    return min(left, right);
}
void update(int ind, int low, int high, int i, int val, int arr[], int seg[])
{
    if (low == high)
    {
        seg[ind] = val;
        return;
    }
    int mid = low + (high - low) / 2;
    if (i < mid)
        update(2 * ind + 1, low, mid, i, val, arr, seg);
    else
        update(2 * ind + 2, mid + 1, high, i, val, arr, seg);
    seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
}
int main()
{
    int n;
    cin >> n;
    int arr[n];
    int seg[4 * n];
    for (int i = 0; i < 4 * n; i++)
    {
        seg[i] = INT_MAX;
    }
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    build(0, 0, n - 1, arr, seg);
    for (auto x : seg)
    {
        cout << x << " ";
    }
    cout<<"--------------------------------------------"<<endl;
    int q;
    cin>>q;
    while(q--){
        int type;
        cin>>type;
        if(type==1){
            int l,r;
            cin>>l>>r;
            cout<<query(0,0,n-1,l,r,arr,seg)<<"\n";
        }
        else{
            int i,val;
            cin>>i>>val;
            update(0,0,n-1,i,val,arr,seg);
        }
    }
    return 0;
}
